#!/usr/bin/env perl

use strict;
use warnings;

use WgetFeature qw(iri);
use FTPTest;

use Encode::Locale qw($ENCODING_LOCALE $ENCODING_CONSOLE_IN $ENCODING_CONSOLE_OUT);
use Encode;


###############################################################################

my $ccedilla_l1 = "\xE7";
my $ccedilla_u8 = "\xC3\xA7";

my $francais = <<EOF;
Some text.
EOF

$francais =~ s/\n/\r\n/;

# code, msg, headers, content
my %urls = (
    "/fran${ccedilla_l1}ais.txt" => {
        content => $francais,
    },
);

my $cmdline = $WgetTest::WGETPATH . " --local-encoding=iso-8859-1 -r -nH -S ftp://localhost:{{port}}/";

my $expected_error_code = 0;

my $native_encoding = $ENCODING_LOCALE;

# To make the downloaded (OS encoding) to here got (maybe transcoded) the same with expected!
# Encode::Locale::reinit() would make: locale == `locale -n`, but locale != (console_in == console_out)
print "LC_CTYPE: " . ($ENV{'LC_CTYPE'} || "") . "\n"; # ~> wget findlocale()
print "ENCODING_LOCALE: " . $ENCODING_LOCALE . "\n";
print "ENCODING_CONSOLE_IN: " . $ENCODING_CONSOLE_IN . "\n";
print "ENCODING_CONSOLE_OUT: " . $ENCODING_CONSOLE_OUT . "\n";

if ($^O eq "msys" || $^O eq "cygwin") {
    use Win32;
    $native_encoding = "CP" . Win32::GetACP();
    print "native encoding: " . $native_encoding . "\n";
}

sub can_transcode_to_locale
{
    my ($from, $str, $to) = @_;
    my $m = Encode::encode($to, Encode::decode($from, $str));
    return Encode::encode($from, Encode::decode($to, $m)) eq $str;
}

my $ccedilla_expected = ${ccedilla_l1};
if (can_transcode_to_locale($native_encoding, $ccedilla_expected, $native_encoding))
{
   $ccedilla_expected = Encode::encode(locale => Encode::decode($native_encoding, $ccedilla_expected));
} else {
    print "Skip: Windows can't transcode correctly with current codepage.\n";
    # example: 0xE7 as CP936 transcoded to utf8 results 0x3F.
    exit 77;
}

my %expected_downloaded_files = (
    "fran${ccedilla_expected}ais.txt" => {
        content => $francais,
    },
);

###############################################################################

my $the_test = FTPTest->new (
                             input => \%urls,
                             cmdline => $cmdline,
                             errcode => $expected_error_code,
                             output => \%expected_downloaded_files);
exit $the_test->run();

# vim: et ts=4 sw=4
